rm(air2)
airquality <- complete.cases(airquality)
airquality
a <- complete.cases(airquality)
airquality <- airquality[a]
airquality
airquality <- airquality[a==TRUE]
airquality
data("airquality")
data(airquality)
airquality
a <- airquality[complete.cases]
a <- airquality[complete.cases(airquality)]
a <- airquality[,complete.cases(airquality)]
a <- airquality[complete.cases(airquality),]
a
acc <- airquality[complete.cases(airquality),]
acc
as.data.frame(acc)
acc
str(acc)
summary(acc)
m1 <- lm(Ozone ~ Temp, data = acc)
m2 <- lm(Ozone ~ Solar.R, data = acc)
m1
plot(m1)
plot(Ozone ~ Temp)
barplot(m1)
plot(m2)
qqplot(m2)
qqplot(Ozone ~ Temp, data = acc)
qqplot(Ozone, Temp, data = acc)
qqplot(acc$Ozone, acc$Temp, data = acc)
qqplot(acc$Ozone, acc$Temp)
hist(acc$Ozone, acc$Temp)
m1 <- lm(Ozone ~ Temp, data = acc)
plot(acc$Ozone ~ acc$Temp)
p2 <- plot(acc$Ozone ~ acc$Solar.R)
p1 <- plot(acc$Ozone ~ acc$Temp, abline=m1)
p1 <- plot(acc$Ozone ~ acc$Temp, line=m1)
p1 <- plot(acc$Ozone ~ acc$Temp, abline="m1")
library(ggplot2)
8/4
range(acc$Temp)
range(acc$Solar.R)
runApp()
range(acc$Ozone)
range(acc$Temp)
range(acc$Solar.R)
runApp()
rm(m1,m2,p1,p2)
rm(airquality)
runApp()
range(acc$Ozone)
runApp()
shiny::runApp()
runApp()
acc
acc <- airquality[complete.cases(airquality),]
str(acc)
runApp()
rm(airquality)
runApp()
sc <- summary(model1)$coefficients
model1 <- lm(Ozone ~ Temp, data = acc)
sc <- summary(model1)$coefficients
sc
sc[1,1]+c(-1,1)*qt(.975,df=model1$df)*sc[1,2]
sc <- summary(model2)$coefficients
sc[1,1]+c(-1,1)*qt(.975,df=model2$df)*sc[1,2]
model2 <- lm(Ozone ~ Solar.R, data = acc)
sc <- summary(model2)$coefficients
sc[1,1]+c(-1,1)*qt(.975,df=model2$df)*sc[1,2]
ci1 <- sc[1,1]+c(-1,1)*qt(.975,df=model1$df)*sc[1,2]
ci1
ci2 <- sc[1,1]+c(-1,1)*qt(.975,df=model2$df)*sc[1,2]
ci2
runApp()
shiny::runApp()
runApp()
library(shiny)
library(dplyr)
data(airquality)
library(ggplot2)
acc <<- airquality[complete.cases(airquality),]
rm(airquality)
acc <<- airquality[complete.cases(airquality),]
str(acc)
shinyServer(function(input, output) {
model1 <- lm(Ozone ~ Temp, data = acc)
model2 <- lm(Ozone ~ Solar.R, data = acc)
sc <- summary(model1)$coefficients
ci1 <- sc[1,1]+c(-1,1)*qt(.975,df=model1$df)*sc[1,2]
ci1
sc <- summary(model2)$coefficients
ci2 <- sc[1,1]+c(-1,1)*qt(.975,df=model2$df)*sc[1,2]
ci2
model1pred <- reactive({
TempInput <- input$sliderTemp
predict(model1, newdata = data.frame(Temp = TempInput))
})
model2pred <- reactive({
TempInput <- input$sliderTemp
SolarInput <- input$sliderSolar.R
predict(model2, newdata = data.frame(Temp = TempInput, Solar.R = SolarInput))
})
output$plot1 <- renderPlot({
TempInput <- input$sliderTemp
plot(acc$Temp, acc$Ozone, xlab = "Temperature",
ylab = "Ozone in PPM", bty = "n", pch = 16,
xlim = c(-10, 120), ylim = c(0, 170))
if(input$showModel1){
abline(model1, col = "red", lwd = 2)
}
legend(-10, 120, c("Model 1 Prediction"), pch = 16,
col = "red", bty = "n", cex = 1.2)
points(TempInput, model1pred(), col = "red", pch = 16, cex = 2)
})
output$plot2 <- renderPlot({
SolarInput <- input$sliderSolar.R
plot(acc$Solar.R, acc$Ozone, xlab = "Solar.R",
ylab = "Ozone in PPM", bty = "n", pch = 16,
xlim = c(0, 350), ylim = c(0, 170))
if(input$showModel2){
abline(model2, col = "blue", lwd = 2)
})
legend(40, 350, c("Model 2 Prediction"), pch = 16,
col = "blue", bty = "n", cex = 1.2)
points(SolarInput, model2pred(), col = "blue", pch = 16, cex = 2)
})
output$pred1 <- renderText({
model1pred()
})
output$pred2 <- renderText({
model2pred()
})
runApp()
rm(airquality)
runApp()
setwd("~/Desktop/Coursera_R/9_DevelopingDataProducts/DDP_CourseProject")
runApp()
setwd("~/Desktop/Coursera_R/9_DevelopingDataProducts/DDP_CourseProject")
runApp()
cia
sc <- summary(model1)$coefficients
model1 <- lm(Ozone ~ Temp, data = acc)
model2 <- lm(Ozone ~ Solar.R, data = acc)
sc <- summary(model1)$coefficients
cia <- sc[1,1]+c(-1,1)*qt(.975,df=model1$df)*sc[1,2]
sc <- summary(model2)$coefficients
cib <- sc[1,1]+c(-1,1)*qt(.975,df=model2$df)*sc[1,2]
output$confIa <- renderText({
cia()
})
runApp()
cia
cia()
runApp()
coef(model1)
confint(model1)
runApp()
cia
cib
runApp()
shiny::runApp()
runApp()
sc1 <- summary(model1)$coefficients
cia <- round(sc1[1,1]+c(-1,1)*qt(.975,df=model1$df)*sc1[1,2],2)
cia
sc2 <- summary(model2)$coefficients
sc1 <- summary(model1)$coefficients
model1 <- lm(Ozone ~ Temp, data = acc)
model2 <- lm(Ozone ~ Solar.R, data = acc)
sc1 <- summary(model1)$coefficients
cia <- round(sc1[1,1]+c(-1,1)*qt(.975,df=model1$df)*sc1[1,2],2)
cia
confint(model1)
confint(model2)
confint(model1)[2,]
confint(model2)[2,]
confint(model1)[,]
confint(model2)[,]
confint(model1)
confint(model2)
rm(cia)
rm(sc1)
output$confInt1 <- renderText({
round(confint(model1)
})
output$confInt2 <- renderText({
round(confint(model2)
})
model1pred <- reactive({
TempInput <- input$sliderTemp
predict(model1, newdata = data.frame(Temp = TempInput))
})
model2pred <- reactive({
SolarInput <- input$sliderSolar.R
predict(model2, newdata = data.frame(Solar.R = SolarInput))
})
output$counter <-
renderText({
if (!file.exists("counter.Rdata"))
counter <- 0
else
load(file = "counter.Rdata")
counter <- counter + 1
save(counter, file="counter.Rdata")
paste0("Hits: ", counter)
})
output$plot1 <- renderPlot({
TempInput <- input$sliderTemp
plot(acc$Temp, acc$Ozone, xlab = "Temperature in degrees F",
ylab = "Ozone ppm", bty = "n", pch = 16,
xlim = c(61, 110), ylim = c(0, 170))
abline(model1, col = "red", lwd = 2)
legend(60,160, c("Ozone prediction"), pch = 16,
col = "red", bty = "n", cex = 1.2)
points(TempInput, model1pred(), col = "red", pch = 16, cex = 2)
})
output$plot2 <- renderPlot({
SolarInput <- input$sliderSolar.R
plot(acc$Solar.R, acc$Ozone, xlab = "Solar.R in W/m^2",
ylab = "Ozone ppm", bty = "n", pch = 16,
xlim = c(5, 350), ylim = c(0, 170),
abline(model2, col = "blue", lwd = 2))
legend(5,160, c("Ozone prediction", output$), pch = 15,
col = "blue", bty = "n", cex = 1.2)
points(SolarInput, model2pred(), col = "blue", pch = 15, cex = 2)
})
output$pred1 <- renderText({
round(model1pred(),2)
})
output$pred2 <- renderText({
round(model2pred(),2)
})
output$data <- renderTable({
colm <- as.numeric(input$var)
head(acc[colm],10)
#head(acc)
})
output$confInt1 <- renderText({
round(confint(model1)
})
output$confInt2 <- renderText({
round(confint(model2)
})
model1pred <- reactive({
TempInput <- input$sliderTemp
predict(model1, newdata = data.frame(Temp = TempInput))
})
model2pred <- reactive({
SolarInput <- input$sliderSolar.R
predict(model2, newdata = data.frame(Solar.R = SolarInput))
})
output$counter <-
renderText({
if (!file.exists("counter.Rdata"))
counter <- 0
else
load(file = "counter.Rdata")
counter <- counter + 1
save(counter, file="counter.Rdata")
paste0("Hits: ", counter)
})
output$plot1 <- renderPlot({
TempInput <- input$sliderTemp
plot(acc$Temp, acc$Ozone, xlab = "Temperature in degrees F",
ylab = "Ozone ppm", bty = "n", pch = 16,
xlim = c(61, 110), ylim = c(0, 170))
abline(model1, col = "red", lwd = 2)
legend(60,160, c("Ozone prediction"), pch = 16,
col = "red", bty = "n", cex = 1.2)
points(TempInput, model1pred(), col = "red", pch = 16, cex = 2)
})
output$plot2 <- renderPlot({
SolarInput <- input$sliderSolar.R
plot(acc$Solar.R, acc$Ozone, xlab = "Solar.R in W/m^2",
ylab = "Ozone ppm", bty = "n", pch = 16,
xlim = c(5, 350), ylim = c(0, 170),
abline(model2, col = "blue", lwd = 2))
legend(5,160, c("Ozone prediction"), pch = 15,
col = "blue", bty = "n", cex = 1.2)
points(SolarInput, model2pred(), col = "blue", pch = 15, cex = 2)
})
output$pred1 <- renderText({
round(model1pred(),2)
})
output$pred2 <- renderText({
round(model2pred(),2)
})
output$data <- renderTable({
colm <- as.numeric(input$var)
head(acc[colm],10)
#head(acc)
})
model1 <- lm(Ozone ~ Temp, data = acc)
model2 <- lm(Ozone ~ Solar.R, data = acc)
confint(model1)
confint(model2)
output$confInt1 <- renderText({
round(confint(model1)
})
output$confInt2 <- renderText({
round(confint(model2)
})
model1pred <- reactive({
TempInput <- input$sliderTemp
predict(model1, newdata = data.frame(Temp = TempInput))
})
model2pred <- reactive({
SolarInput <- input$sliderSolar.R
predict(model2, newdata = data.frame(Solar.R = SolarInput))
})
output$counter <-
renderText({
if (!file.exists("counter.Rdata"))
counter <- 0
else
load(file = "counter.Rdata")
counter <- counter + 1
save(counter, file="counter.Rdata")
paste0("Hits: ", counter)
})
output$plot1 <- renderPlot({
TempInput <- input$sliderTemp
plot(acc$Temp, acc$Ozone, xlab = "Temperature in degrees F",
ylab = "Ozone ppm", bty = "n", pch = 16,
xlim = c(61, 110), ylim = c(0, 170))
abline(model1, col = "red", lwd = 2)
legend(60,160, c("Ozone prediction"), pch = 16,
col = "red", bty = "n", cex = 1.2)
points(TempInput, model1pred(), col = "red", pch = 16, cex = 2)
})
output$plot2 <- renderPlot({
SolarInput <- input$sliderSolar.R
plot(acc$Solar.R, acc$Ozone, xlab = "Solar.R in W/m^2",
ylab = "Ozone ppm", bty = "n", pch = 16,
xlim = c(5, 350), ylim = c(0, 170),
abline(model2, col = "blue", lwd = 2))
legend(5,160, c("Ozone prediction"), pch = 15,
col = "blue", bty = "n", cex = 1.2)
points(SolarInput, model2pred(), col = "blue", pch = 15, cex = 2)
})
output$pred1 <- renderText({
round(model1pred(),2)
})
output$pred2 <- renderText({
round(model2pred(),2)
})
output$data <- renderTable({
colm <- as.numeric(input$var)
head(acc[colm],10)
#head(acc)
})
output$confInt1 <- renderText({
round(confint(model1))
})
output$confInt2 <- renderText({
round(confint(model2))
})
c1 <- confint(model1)
c2 <- confint(model2)
output$confInt1 <- renderText({
round(c1,2)
})
output$confInt2 <- renderText({
round(c2,2)
})
output$confInt1 <- renderText({
round(c1,2)
})
output$confInt1 <-
renderText({
round(c1,2)
})
c1 <- confint(model1)
c2 <- confint(model2)
output$confInt1 <-
renderText({
round(c1,2)
})
output$confInt2 <- renderText({
round(c2,2)
})
model1 <- lm(Ozone ~ Temp, data = acc)
model2 <- lm(Ozone ~ Solar.R, data = acc)
c1 <- confint(model1)
c2 <- confint(model2)
output$confInt1 <-
renderText({
round(c1,2)
})
output$confInt1 <-
renderText({
round(c1(),2)
})
output$confInt2 <- renderText({
round(c2(),2)
})
runApp()
table(c1)
runApp()
?predict
runApp()
model1 <- lm(Ozone ~ Temp, data = acc)
model2 <- lm(Ozone ~ Solar.R, data = acc)
c1 <- confint(model1)
c2 <- confint(model2)
output$ci1 <- renderPrint({
confint(model1)
})
model1 <- lm(Ozone ~ Temp, data = acc)
model2 <- lm(Ozone ~ Solar.R, data = acc)
output$ci1 <- renderPrint({
confint(model1)
})
output$ci2 <- renderPrint({
confint(model2)
})
shinyUI(fluidPage(
titlePanel(title = h1("Predicting levels of ppm Ozone based on Temperature or Solar Radiation inputs", align = "center")),
br(),
sidebarLayout(
sidebarPanel(
selectInput("var", "1. To view the the first ten rows of observations of a variable of the acc subset of the airquality data set, first select the Data Tab to the right, then select a variable name from the drop down menu below, finally click the submit button located at the bottom of this panel to view results.", choices = c("Ozone" = 1,"Solar.R" = 2,"Wind"=3,"Temp"=4,"Month"=5,"Day"=6)),
br(),
sliderInput("sliderTemp", "2. To get a prediction for ppm of Ozone using Model 1, first select the Model 1 Plot tab to the right, then select the desired Temperature input on the slider below, finally click the submit button at the bottom of this panel to view results on the y axis.", 61, 110, value = 71),
# h5("Model 1 Confidence Interval "),
# h5(textOutput("confIa")),
br(),
sliderInput("sliderSolar.R", "3. To get a prediction for ppm of Ozone using Model 2, first select the Model 2 Plot tab to the right, then select the desired Solar.R  input on the slider below, finally click the submit button below to view results.", 5, 350, value = 75),
#                        selectInput("var2", "4. To ... finally click the submit button located at the bottom of this panel to view results.", choices = c("Summary" = 1,"Structure" = 2,"ConfInterval")),
br(),
submitButton("Submit"),
br(),
h5(textOutput("counter")),
tags$style("body{background-color:tan; color:blue}"),
br()
),
mainPanel(
tabsetPanel(type="tab",
tabPanel("Data", tableOutput("data")),
tabPanel("ConfInt1", verbatimTextOutput("ci1")),
tabPanel("ConfInt2", verbatimTextOutput("ci2")),
tabPanel("Summary", verbatimTextOutput("sum")),
tabPanel("Structure", verbatimTextOutput("str")),
tabPanel("Model 1 Plot", plotOutput("plot1")),
tabPanel("Model 2 Plot", plotOutput("plot2")),
),
br()
#h3("Model 1: Ozone Prediction Based on Temperature Input", align = "center"),
#plotOutput("plot1"),
#br(),
#h3("Model 2: Ozone Prediction Based on Solar.R Input", align = "center"),
#plotOutput("plot2")
),
)
))
shinyUI(fluidPage(
titlePanel(title = h1("Predicting levels of ppm Ozone based on Temperature or Solar Radiation inputs", align = "center")),
br(),
sidebarLayout(
sidebarPanel(
selectInput("var", "1. To view the the first ten rows of observations of a variable of the acc subset of the airquality data set, first select the Data Tab to the right, then select a variable name from the drop down menu below, finally click the submit button located at the bottom of this panel to view results.", choices = c("Ozone" = 1,"Solar.R" = 2,"Wind"=3,"Temp"=4,"Month"=5,"Day"=6)),
br(),
sliderInput("sliderTemp", "2. To get a prediction for ppm of Ozone using Model 1, first select the Model 1 Plot tab to the right, then select the desired Temperature input on the slider below, finally click the submit button at the bottom of this panel to view results on the y axis.", 61, 110, value = 71),
# h5("Model 1 Confidence Interval "),
# h5(textOutput("confIa")),
br(),
sliderInput("sliderSolar.R", "3. To get a prediction for ppm of Ozone using Model 2, first select the Model 2 Plot tab to the right, then select the desired Solar.R  input on the slider below, finally click the submit button below to view results.", 5, 350, value = 75),
#                        selectInput("var2", "4. To ... finally click the submit button located at the bottom of this panel to view results.", choices = c("Summary" = 1,"Structure" = 2,"ConfInterval")),
br(),
submitButton("Submit"),
br(),
h5(textOutput("counter")),
tags$style("body{background-color:tan; color:blue}"),
br()
),
mainPanel(
tabsetPanel(type="tab",
tabPanel("Data", tableOutput("data")),
tabPanel("ConfInt1", verbatimTextOutput("ci1")),
tabPanel("ConfInt2", verbatimTextOutput("ci2")),
tabPanel("Summary", verbatimTextOutput("sum")),
tabPanel("Structure", verbatimTextOutput("str")),
tabPanel("Model 1 Plot", plotOutput("plot1")),
tabPanel("Model 2 Plot", plotOutput("plot2")),
),
br()
#h3("Model 1: Ozone Prediction Based on Temperature Input", align = "center"),
#plotOutput("plot1"),
#br(),
#h3("Model 2: Ozone Prediction Based on Solar.R Input", align = "center"),
#plotOutput("plot2")
),
)
))
mainPanel(
tabsetPanel(type="tab",
tabPanel("Data", tableOutput("data")),
tabPanel("ConfInt1", verbatimTextOutput("ci1")),
tabPanel("ConfInt2", verbatimTextOutput("ci2")),
tabPanel("Summary", verbatimTextOutput("sum")),
tabPanel("Structure", verbatimTextOutput("str")),
tabPanel("Model 1 Plot", plotOutput("plot1")),
tabPanel("Model 2 Plot", plotOutput("plot2")),
),
br()
runApp()
rm(c1,c2)
runApp()
