data(diamonds)
sample_frac(diamonds, 300, replace = TRUE)
runApp('~/Desktop/Coursera_R/9_DevelopingDataProducts/DDP_CourseProject')
str(diamond)
runApp('~/Desktop/Coursera_R/9_DevelopingDataProducts/DDP_CourseProject')
range(diamond$price)
range(diamond$carat)
runApp('~/Desktop/Coursera_R/9_DevelopingDataProducts/DDP_CourseProject')
range(diamond$carat)
runApp('~/Desktop/Coursera_R/9_DevelopingDataProducts/DDP_CourseProject')
setwd("~/Desktop/Coursera_R/9_DevelopingDataProducts/DDP_CourseProject")
shiny::runApp()
install.packages("kernlab")
runApp()
---
title: "Packages"
author: "james c walmsley"
date: "March 9, 2017"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
```{r, packages, echo=FALSE, include=FALSE, results='hide'}
install.packages("devtools")
install.packages("UsingR")
install.packages("caret")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("git2r")
install.packages("kernlab")
install.packages("pgmm")
install.packages("randomForest")
install.packages("rattle")
install.packages("raster")
install.packages("RColorBrewer")
install.packages("rpart")
install.packages("yaml")
install.packages("stats")
install.packages("tidyr")
install.packages("datasets")
library(devtools)
library(UsingR)
library(caret)
library(dplyr)
library(ggplot2)
library(git2r)
library(kernlab)
library(pgmm)
library(randomForest)
library(rattle)
library(raster)
library(RColorBrewer)
library(rpart)
library(yaml)
library(stats)
library(tidyr)
library(UsingR)
devtools::install_github('rstudio/shinyapps')
```
install.packages("stats")
setwd("~/Desktop/Coursera_R/9_DevelopingDataProducts/DDP_CourseProject")
install.packages("stats")
runApp()
str(airquality)
summary(airquality)
runApp()
data(airquality)
data(datasets)
library(datasets)
data(airquality)
head(airquality)
runApp()
library(datasets)
data(airquality)
head(airquality)
runApp()
summary(airquality)
str(airquality)
airquality <- complete.cases(airquality)
airquality <- airquality[complete.cases(airquality)]
airquality
data(airquality)
head(airquality)
bad <- airquality[!complete.cases(airquality),]
head(airquality)
bad <- airquality[!complete.cases(airquality),]
airquality[!bad]
library(datasets)
data(airquality)
head(airquality)
bad <- airquality[!complete.cases(airquality)]
bad <- airquality[,!complete.cases(airquality)]
airquality[!bad]
bad <- airquality[,!is.complete.cases(airquality)]
bad <- airquality[!complete.cases(airquality)]
bad <- airquality[,!complete.cases(airquality)]
bad <- airquality(airquality[!complete.cases(airquality)])
good <- complete.cases(airquality)
airquality[good]
airquality[,good]
airquality <- airquality[good,]
airquality
summary(airquality)
runApp()
getwd()
runApp()
setwd("~/Desktop/Coursera_R/9_DevelopingDataProducts/DDP_CourseProject")
runApp()
head(airq)
head(airquality)
runApp()
source("/Users/jamescwalmsley/Desktop/Coursera_R/9_DevelopingDataProducts/DDP_CourseProject/airquality2.R")
runApp()
airquality2 <- airquality[good,]
summary(airquality2)
head(airquality2)
runApp()
length(airquality2)[Ozone]
length(airquality2)[,Ozone]
length(airquality2[,Ozone])
length(airquality2$Ozone)
length(airquality2$Temp)
runApp()
rm(airquality)
rm(bad)
runApp()
library(dplyr)
runApp()
as.data.frame(airquality2)
airquality2 <- airquality[!bad,]
head(airquality)
bad <- !complete.cases(airquality)
airquality2 <- airquality[!bad,]
summary(airquality2)
getwd()
head(airquality2)
as.data.frame(airquality2)
runApp()
rm(good)
as.data.frame(airquality2)
airquality
is.na(airquality2)
rm(airquality2)
library(datasets)
data(airquality)
airquality
head(airquality)
bad <- !complete.cases(airquality)
airquality2 <- airquality[!bad,]
summary(airquality2)
head(airquality2)
as.data.frame(airquality2)
is.na(airquality2)
str(airq)
str(airquality2)
rm(airquality)
runApp()
library(datasets)
data(airquality)
airquality
head(airquality)
bad <- !complete.cases(airquality)
airquality2 <- airquality[!bad,]
summary(airquality2)
head(airquality2)
as.data.frame(airquality2)
is.na(airquality2)
str(airquality2)
rm(airquality)
runApp()
length(Ozone)
setwd("~/Desktop/Coursera_R/9_DevelopingDataProducts/DDP_CourseProject")
length(Ozone)
length(airquality2$Ozone)
length(airquality2$Temp)
runApp()
library(shiny)
library(dplyr)
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
model <- lm(airquality2$Ozone ~ airquality2$Temp, data = airquality2)
modelpred <- reactive({
tempInput <- input$sliderTemp
predict(model, newdata = data.frame(Temp = tempInput))
})
output$plot <- renderPlot({
tempInput <- input$sliderTemp
plot(airquality2$Temp, airquality2$Ozone, xlab = "Temperature in Degrees",
ylab = "Ozone in PPM", bty = "n", pch = 16,
xlim = c(0,170), ylim = c(0,170))
if(input$showmodel){
abline(model, col = "blue", lwd = 2)
}
points(tempInput, modelpred(), col = "red", pch = 16, cex = 2)
})
output$pred <- renderText({
modelpred()
})
library(shiny)
# Define UI for an application that plots a thousand uniforn random variables from user inputs
shinyUI(fluidPage(
# Application title
titlePanel("Predict the level of Ozone according to the Temperature Input"),
# Sidebar with a slider input for user selection of inputs
sidebarLayout(
sidebarPanel(
sliderInput("sliderTemp", "Select Model Input Temperature Desired", 0, 120, value = 65, step = 1),
checkboxInput("showmodel", "Show/Hide model", value = TRUE),
submitButton("Submit")
),
mainPanel(
plotOutput("plot"),
h3("Prediction of Ozone Level Based on User Temperature Input to Model:"),
textOutput("modelpred")
)
))
runApp()
airquality2
library(datasets)
data(airquality)
airquality
head(airquality)
bad <- !complete.cases(airquality)
airquality2 <- airquality[!bad,]
summary(airquality2)
head(airquality2)
as.data.frame(airquality2)
is.na(airquality2)
str(airquality2)
rm(airquality)
airquality2
View(airquality2)
rm(airquality2)
rm(bad)
airquality
any(is.na(airquality))
bad <- !complete.cases(airquality)
airqualitynew <- airquality[!bad]
airqualitynew <- airquality[!bad,]
any(is.na(airqualitynew))
shiny::runApp()
runApp()
range(airqualitynew$Ozone, airqualitynew$Temp)
range(airqualitynew$Ozone)
range(airqualitynew$Temp)
runApp()
airqualitynew
runApp()
predict(model, newdata = data.frame(Temp = tempInput))
runApp()
rm(airqualitynew)
rm(bad)
View(ChickWeight)
swiss
View(anscombe)
runApp()
setwd("~/Desktop/Coursera_R/9_DevelopingDataProducts/DDP_CourseProject")
runApp()
shiny::runApp()
runApp()
dataset <- faithful
runApp()
setwd("~/Desktop/Coursera_R/9_DevelopingDataProducts/DDP_CourseProject")
runApp()
range(swiss)
runApp()
range(swiss[,c(1,2,3,4,5)])
range(swiss[,1])
range(swiss[,3])
range(swiss[,2])
range(swiss[,4])
range(swiss[,5])
runApp()
range(swiss[,1])
range(swiss[,2])
swiss[,1]
runApp()
system.file("examples", package="shiny")
runExample("01_hello") # a histogram
runApp()
dataset <- swiss
runApp()
dataset <- swiss
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel(title = h4("Determinants of Swiss Infant Mortality", align="center"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("var", "1. Select the desired variable from the Swiss dataset", choices = c("Fertility" = 1, "Agriculture" = 2, "Examination" = 3,"Education" = 4,"Catholic" = 5), selected = 1),
br(),
sliderInput("bins",
"2. Select the Number of BINs for the Histogram",
min = 0,
max = 50,
value = 20),
br(),
radioButtons("color", "3. Select the histogram color", choices = c("green","red","yellow"), selected = "red"),
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("Mortality_Predicton")
)
))
library(shiny)
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
output$Mortality_Predicton <- renderPlot({
# generate bins based on input$bins from ui.R
colm <- as.numeric(input$var)
# draw the histogram with the specified number of bins
hist(dataset[,colm], breaks =seq(0,max(dataset[,colm], l=input$bins+1), col = input$color, main = "Histogram of the Swiss data set", xlab=names(dataset[colm]))
})
runApp()
dataset <- swiss
runApp()
swiss <- read.csv("~/Desktop/Coursera_R/9_DevelopingDataProducts/DDP_CourseProject/swiss.R", sep="")
View(swiss)
dataset <- swiss
dataset
swiss
data(swiss)
swiss
dataset <- swiss
dataset
runApp()
source(swiss.R)
source(swiss)
read.csv(swiss)
read.csv(swiss.r)
data(swiss)
swiss
dataset <- swiss
dataset
str(dataset)
runApp()
dataset
runApp()
runGist("3239667")
data("iris")
iris
dataset <- iris
dataset
str(dataset)
dataset
iris
runApp()
data("iris")
iris
runApp()
data(iris)
iris
data(iris)
iris
runApp()
setwd("~/Desktop/Coursera_R/9_DevelopingDataProducts/DDP_CourseProject")
iris
for(i in seq_along(iris[,i])){}
shiny::runApp()
mtcars
iris
m <- lm(iris$species ~ iris$Petal.Width, data = iris)
m <- lm(species ~ iris$Petal.Width, data = iris)
m <- lm(iris$species ~ iris$Petal.Width, data = iris)
m <- lm(as.factor(iris$species) ~ iris$Petal.Width, data = iris)
m <- lm(factor(iris$species) ~ iris$Petal.Width, data = iris)
m <- lm(factor(iris$species) ~ iris$Sepal.Length, data = iris)
m <- lm(as.factor(iris$species) ~ iris$Sepal.Length, data = iris)
m <- lm(as.factor(iris$species) ~ as.numeric(iris$Sepal.Length), data = iris)
class(iris)
str(iris)
m <- lm(iris[,5] ~ iris[,1], data = iris)
library(dplyr)
m <- lm(species ~ Sepal.Length, data = iris)
m <- lm(iris$species ~ Sepal.Length, data = iris)
head(ChickWeight)
data(airquality)
airquality
bad <- is.na(airquality)
air2 <- airquality[!bad]
library(dplyr)
air2
shinyServer(function(input, output) {
mtcars$mpgsp <- ifelse(mtcars$mpg - 20 > 0, mtcars$mpg - 20, 0)
model1 <- lm(hp ~ mpg, data = mtcars)
model2 <- lm(hp ~ mpgsp + mpg, data = mtcars)
model1pred <- reactive({
mpgInput <- input$sliderMPG
predict(model1, newdata = data.frame(mpg = mpgInput))
})
model2pred <- reactive({
mpgInput <- input$sliderMPG
predict(model2, newdata =
data.frame(mpg = mpgInput,
mpgsp = ifelse(mpgInput - 20 > 0,
mpgInput - 20, 0)))
})
bad <- is.na(airquality)
air2 <- airquality[!bad]
air2
bad <- is.na(airquality)
>
library(shiny)
library(dplyr)
bad <- is.na(airquality)
air2 <- airquality[!bad]
air2
air2 <- airquality[!bad,]
air2
good <- complete.cases(airquality)
air2 <- airquality[good]
air2 <- airquality[,good]
good <- complete.cases(airquality)
good
bad <- !complete.cases(airquality)
air2 <- airquality[!bad]
air2 <- airquality[,!bad]
air2
air2 <- airquality-[!bad]
air2
air2 <- airquality[-(bad)]
air2
g <- complete.cases(airquality)
air2 <- airquality[g]
air2
air2 <- airquality[g,]
air2
b <- !complete.cases(airquality)
g <- any(complete.cases(airquality))
air2 <- airquality[g]
air2
rm(b,g,bad,good)
rm(air2)
airquality <- complete.cases(airquality)
airquality
a <- complete.cases(airquality)
airquality <- airquality[a]
airquality
airquality <- airquality[a==TRUE]
airquality
data("airquality")
data(airquality)
airquality
a <- airquality[complete.cases]
a <- airquality[complete.cases(airquality)]
a <- airquality[,complete.cases(airquality)]
a <- airquality[complete.cases(airquality),]
a
acc <- airquality[complete.cases(airquality),]
acc
as.data.frame(acc)
acc
str(acc)
summary(acc)
m1 <- lm(Ozone ~ Temp, data = acc)
m2 <- lm(Ozone ~ Solar.R, data = acc)
m1
plot(m1)
plot(Ozone ~ Temp)
barplot(m1)
plot(m2)
qqplot(m2)
qqplot(Ozone ~ Temp, data = acc)
qqplot(Ozone, Temp, data = acc)
qqplot(acc$Ozone, acc$Temp, data = acc)
qqplot(acc$Ozone, acc$Temp)
hist(acc$Ozone, acc$Temp)
m1 <- lm(Ozone ~ Temp, data = acc)
plot(acc$Ozone ~ acc$Temp)
p2 <- plot(acc$Ozone ~ acc$Solar.R)
p1 <- plot(acc$Ozone ~ acc$Temp, abline=m1)
p1 <- plot(acc$Ozone ~ acc$Temp, line=m1)
p1 <- plot(acc$Ozone ~ acc$Temp, abline="m1")
library(ggplot2)
8/4
range(acc$Temp)
range(acc$Solar.R)
runApp()
range(acc$Ozone)
range(acc$Temp)
range(acc$Solar.R)
runApp()
rm(m1,m2,p1,p2)
rm(airquality)
runApp()
range(acc$Ozone)
runApp()
shiny::runApp()
runApp()
acc
acc <- airquality[complete.cases(airquality),]
str(acc)
runApp()
rm(airquality)
runApp()
sc <- summary(model1)$coefficients
model1 <- lm(Ozone ~ Temp, data = acc)
sc <- summary(model1)$coefficients
sc
sc[1,1]+c(-1,1)*qt(.975,df=model1$df)*sc[1,2]
sc <- summary(model2)$coefficients
sc[1,1]+c(-1,1)*qt(.975,df=model2$df)*sc[1,2]
model2 <- lm(Ozone ~ Solar.R, data = acc)
sc <- summary(model2)$coefficients
sc[1,1]+c(-1,1)*qt(.975,df=model2$df)*sc[1,2]
ci1 <- sc[1,1]+c(-1,1)*qt(.975,df=model1$df)*sc[1,2]
ci1
ci2 <- sc[1,1]+c(-1,1)*qt(.975,df=model2$df)*sc[1,2]
ci2
runApp()
