xlim = c(5, 350), ylim = c(0, 170),
abline(model2, col = "blue", lwd = 2))
legend(5,160, c("Ozone prediction"), pch = 15,
col = "blue", bty = "n", cex = 1.2)
points(SolarInput, model2pred(), col = "blue", pch = 15, cex = 2)
})
output$pred1 <- renderText({
round(model1pred(),2)
})
output$pred2 <- renderText({
round(model2pred(),2)
})
output$data <- renderTable({
colm <- as.numeric(input$var)
head(acc[colm],10)
#head(acc)
})
output$confInt1 <- renderText({
round(confint(model1))
})
output$confInt2 <- renderText({
round(confint(model2))
})
c1 <- confint(model1)
c2 <- confint(model2)
output$confInt1 <- renderText({
round(c1,2)
})
output$confInt2 <- renderText({
round(c2,2)
})
output$confInt1 <- renderText({
round(c1,2)
})
output$confInt1 <-
renderText({
round(c1,2)
})
c1 <- confint(model1)
c2 <- confint(model2)
output$confInt1 <-
renderText({
round(c1,2)
})
output$confInt2 <- renderText({
round(c2,2)
})
model1 <- lm(Ozone ~ Temp, data = acc)
model2 <- lm(Ozone ~ Solar.R, data = acc)
c1 <- confint(model1)
c2 <- confint(model2)
output$confInt1 <-
renderText({
round(c1,2)
})
output$confInt1 <-
renderText({
round(c1(),2)
})
output$confInt2 <- renderText({
round(c2(),2)
})
runApp()
table(c1)
runApp()
?predict
runApp()
model1 <- lm(Ozone ~ Temp, data = acc)
model2 <- lm(Ozone ~ Solar.R, data = acc)
c1 <- confint(model1)
c2 <- confint(model2)
output$ci1 <- renderPrint({
confint(model1)
})
model1 <- lm(Ozone ~ Temp, data = acc)
model2 <- lm(Ozone ~ Solar.R, data = acc)
output$ci1 <- renderPrint({
confint(model1)
})
output$ci2 <- renderPrint({
confint(model2)
})
shinyUI(fluidPage(
titlePanel(title = h1("Predicting levels of ppm Ozone based on Temperature or Solar Radiation inputs", align = "center")),
br(),
sidebarLayout(
sidebarPanel(
selectInput("var", "1. To view the the first ten rows of observations of a variable of the acc subset of the airquality data set, first select the Data Tab to the right, then select a variable name from the drop down menu below, finally click the submit button located at the bottom of this panel to view results.", choices = c("Ozone" = 1,"Solar.R" = 2,"Wind"=3,"Temp"=4,"Month"=5,"Day"=6)),
br(),
sliderInput("sliderTemp", "2. To get a prediction for ppm of Ozone using Model 1, first select the Model 1 Plot tab to the right, then select the desired Temperature input on the slider below, finally click the submit button at the bottom of this panel to view results on the y axis.", 61, 110, value = 71),
# h5("Model 1 Confidence Interval "),
# h5(textOutput("confIa")),
br(),
sliderInput("sliderSolar.R", "3. To get a prediction for ppm of Ozone using Model 2, first select the Model 2 Plot tab to the right, then select the desired Solar.R  input on the slider below, finally click the submit button below to view results.", 5, 350, value = 75),
#                        selectInput("var2", "4. To ... finally click the submit button located at the bottom of this panel to view results.", choices = c("Summary" = 1,"Structure" = 2,"ConfInterval")),
br(),
submitButton("Submit"),
br(),
h5(textOutput("counter")),
tags$style("body{background-color:tan; color:blue}"),
br()
),
mainPanel(
tabsetPanel(type="tab",
tabPanel("Data", tableOutput("data")),
tabPanel("ConfInt1", verbatimTextOutput("ci1")),
tabPanel("ConfInt2", verbatimTextOutput("ci2")),
tabPanel("Summary", verbatimTextOutput("sum")),
tabPanel("Structure", verbatimTextOutput("str")),
tabPanel("Model 1 Plot", plotOutput("plot1")),
tabPanel("Model 2 Plot", plotOutput("plot2")),
),
br()
#h3("Model 1: Ozone Prediction Based on Temperature Input", align = "center"),
#plotOutput("plot1"),
#br(),
#h3("Model 2: Ozone Prediction Based on Solar.R Input", align = "center"),
#plotOutput("plot2")
),
)
))
shinyUI(fluidPage(
titlePanel(title = h1("Predicting levels of ppm Ozone based on Temperature or Solar Radiation inputs", align = "center")),
br(),
sidebarLayout(
sidebarPanel(
selectInput("var", "1. To view the the first ten rows of observations of a variable of the acc subset of the airquality data set, first select the Data Tab to the right, then select a variable name from the drop down menu below, finally click the submit button located at the bottom of this panel to view results.", choices = c("Ozone" = 1,"Solar.R" = 2,"Wind"=3,"Temp"=4,"Month"=5,"Day"=6)),
br(),
sliderInput("sliderTemp", "2. To get a prediction for ppm of Ozone using Model 1, first select the Model 1 Plot tab to the right, then select the desired Temperature input on the slider below, finally click the submit button at the bottom of this panel to view results on the y axis.", 61, 110, value = 71),
# h5("Model 1 Confidence Interval "),
# h5(textOutput("confIa")),
br(),
sliderInput("sliderSolar.R", "3. To get a prediction for ppm of Ozone using Model 2, first select the Model 2 Plot tab to the right, then select the desired Solar.R  input on the slider below, finally click the submit button below to view results.", 5, 350, value = 75),
#                        selectInput("var2", "4. To ... finally click the submit button located at the bottom of this panel to view results.", choices = c("Summary" = 1,"Structure" = 2,"ConfInterval")),
br(),
submitButton("Submit"),
br(),
h5(textOutput("counter")),
tags$style("body{background-color:tan; color:blue}"),
br()
),
mainPanel(
tabsetPanel(type="tab",
tabPanel("Data", tableOutput("data")),
tabPanel("ConfInt1", verbatimTextOutput("ci1")),
tabPanel("ConfInt2", verbatimTextOutput("ci2")),
tabPanel("Summary", verbatimTextOutput("sum")),
tabPanel("Structure", verbatimTextOutput("str")),
tabPanel("Model 1 Plot", plotOutput("plot1")),
tabPanel("Model 2 Plot", plotOutput("plot2")),
),
br()
#h3("Model 1: Ozone Prediction Based on Temperature Input", align = "center"),
#plotOutput("plot1"),
#br(),
#h3("Model 2: Ozone Prediction Based on Solar.R Input", align = "center"),
#plotOutput("plot2")
),
)
))
mainPanel(
tabsetPanel(type="tab",
tabPanel("Data", tableOutput("data")),
tabPanel("ConfInt1", verbatimTextOutput("ci1")),
tabPanel("ConfInt2", verbatimTextOutput("ci2")),
tabPanel("Summary", verbatimTextOutput("sum")),
tabPanel("Structure", verbatimTextOutput("str")),
tabPanel("Model 1 Plot", plotOutput("plot1")),
tabPanel("Model 2 Plot", plotOutput("plot2")),
),
br()
runApp()
rm(c1,c2)
runApp()
setwd("~/Desktop/Coursera_R/9_DevelopingDataProducts/DDP_CourseProject")
summary(acc)
acc <<- airquality[complete.cases(airquality),]
summary(acc)
model1 <- lm(Ozone ~ Temp, data = acc)
model2 <- lm(Ozone ~ Solar.R, data = acc)
plot(model1)
qplot(model1)
library(ggplot2)
install.packages("lattice")
library(lattice)
model1 <- lm(Ozone ~ Temp, data = acc)
model2 <- lm(Ozone ~ Solar.R, data = acc)
xyplot(model1)
library(dplyr)
x1 <- Temp
y1 <- Solar.R
data(acc)
acc <<- airquality[complete.cases(airquality),]
summary(acc)
library(ggplot2)
install.packages("lattice")
library(lattice)
library(dplyr)
data(acc)
model1 <- lm(Ozone ~ Temp, data = acc)
model2 <- lm(Ozone ~ Solar.R, data = acc)
x1 <- Temp
y1 <- Solar.R
xyplot(y ~ x | data = acc)
install.packages("lattice")
model1 <- lm(Ozone ~ Temp, data = acc)
model2 <- lm(Ozone ~ Solar.R, data = acc)
x1 <- Temp
y1 <- Solar.R
xyplot(y ~ x | data = acc)
x1 <- acc$Temp
y1 <- acc$Solar.R
xyplot(y ~ x | data = acc)
xyplot(y1 ~ x1 | data = acc)
xyplot(y1 ~ x1, data = acc)
xyplot(acc$Ozone ~ acc$Temp, data = acc)
fit <- lm(acc$Ozone ~ acc$Temp, data = acc)
install.packages("lattice")
library(lattice)
data(acc)
fit <- lm(acc$Ozone ~ acc$Temp, data = acc)
xyplot(acc$Ozone ~ acc$Temp, data = acc, abline(fit))
install.packages("lattice")
library(lattice)
data(acc)
fit <- lm(acc$Ozone ~ acc$Temp, data = acc)
xyplot(acc$Ozone ~ acc$Temp, data = acc, abline(fit, lwd = 2))
fit <- lm(acc$Ozone ~ ., data = acc)
xyplot(acc$Ozone ~ acc$Temp, data = acc, abline(fit, lwd = 2))
xyplot(acc$Ozone ~ acc$Temp, data = acc, abline(fit[2], lwd = 2))
xyplot(acc$Ozone ~ acc$Temp, data = acc, abline(fit[1], lwd = 2))
fit <- lm(acc$Ozone ~ acc$Temp, data = acc)
xyplot(acc$Ozone ~ acc$Temp, data = acc, abline(fit), lwd = 2))
xyplot(acc$Ozone ~ acc$Temp, data = acc, abline(fit), lwd = 2)
xyplot(acc$Ozone ~ acc$Temp | acc$Month, data = acc, layout = c(5,1))
acc <- transform(acc, acc$Month = factanal(acc$Month))
xyplot(acc$Ozone ~ acc$Temp | acc$Month, data = acc, layout = c(5,1))
acc <- transform(acc, acc$Month = factor(acc$Month))
xyplot(acc$Ozone ~ acc$Temp | acc$Month, data = acc, layout = c(5,1))
acc <- transform(acc, acc$Month = factor(acc$Month))
acc <- transform(acc$Ozone, acc$Month = factor(acc$Month))
xyplot(acc$Ozone ~ acc$Temp | acc$Month, data = acc, layout = c(5,1))
acc <- transform(acc, acc$Month = factor(acc$Month))
xyplot(acc$Ozone ~ acc$Temp | acc$Month, data = acc, layout = c(5,1))
acc <- transform(acc, acc$Month = factor(acc$Month))
xyplot(acc$Ozone ~ acc$Temp | acc$Month, data = acc, layout = c(5,1))
acc <- transform(acc, acc$Month = factor(acc$Month))
xyplot(acc$Ozone ~ acc$Temp | acc$Month, data = acc, layout = c(5,1))
acc <- transform(acc, acc$Month = factor(Month))
xyplot(acc$Ozone ~ acc$Temp | acc$Month, data = acc, layout = c(5,1))
acc <- transform(acc, Month = factor(Month))
xyplot(acc$Ozone ~ acc$Temp | acc$Month, data = acc, layout = c(5,1))
xyplot(Ozone ~ Temp | Month, data = acc, layout = c(5,1))
acc <- transform(acc, Month = factor(Month))
xyplot(Ozone ~ Temp | Month, data = acc, layout = c(5,1))
fit <- lm(Ozone ~ Temp, data = acc)
xyplot(Ozone ~ Temp | Month, data = acc, layout = c(5,1), abline(fit))
?plot.new
plot.new(xyplot(Ozone ~ Temp | Month, data = acc, layout = c(5,1), abline(fit)))
xyplot(Ozone ~ Temp | Month, data = acc, layout = c(5,1), abline(fit))
xyplot(Ozone ~ Temp | Month, data = acc, layout = c(5,1)
```
xyplot(Ozone ~ Temp | Month, data = acc, layout = c(5,1))
fit <- lm(Ozone ~ Temp, data = acc)
acc <- transform(acc, Month = factor(Month))
xyplot(Ozone ~ Temp | Month, data = acc, layout = c(5,1))
fit1 <- lm(Ozone ~ Temp, data = acc)
rm(fit)
rm(x1,y1)
install.packages("ggplot2")
library(ggplot2)
data(acc)
ggplot(airquality, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
install.packages("ggplot2")
library(ggplot2)
data(acc)
ggplot(acc, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
install.packages("ggplot2")
library(ggplot2)
data(acc)
ggplot(acc, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
install.packages("ggplot2")
local({r <- getOption("repos")
r["CRAN"] <- "http://cran.r-project.org"
options(repos=r)
})
acc <<- airquality[complete.cases(airquality),]
summary(acc)
install.packages("ggplot2")
library(ggplot2)
data(acc)
ggplot(acc, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
install.packages("ggplot2")
local({r <- getOption("repos")
r["CRAN"] <- "http://cran.r-project.org"
options(repos=r)
})
acc <<- airquality[complete.cases(airquality),]
summary(acc)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
data(acc)
ggplot(acc, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
local({r <- getOption("repos")
r["CRAN"] <- "http://cran.r-project.org"
options(repos=r)
})
acc <<- airquality[complete.cases(airquality),]
summary(acc)
data(acc)
install.packages("ggplot2")
library(ggplot2)
ggplot(acc, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
install.packages("ggplot2")
# Chunk 1
local({r <- getOption("repos")
r["CRAN"] <- "http://cran.r-project.org"
options(repos=r)
})
acc <<- airquality[complete.cases(airquality),]
summary(acc)
install.packages("ggplot2")
library(ggplot2)
# Chunk 2
ggplot(acc, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
install.packages("ggplot2")
# Chunk 1
local({r <- getOption("repos")
r["CRAN"] <- "http://cran.r-project.org"
options(repos=r)
})
acc <<- airquality[complete.cases(airquality),]
summary(acc)
install.packages("ggplot2")
library(ggplot2)
# Chunk 2
ggplot(acc, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
install.packages("ggplot2")
# Chunk 1
local({r <- getOption("repos")
r["CRAN"] <- "http://cran.r-project.org"
options(repos=r)
})
acc <<- airquality[complete.cases(airquality),]
summary(acc)
install.packages("ggplot2")
library(ggplot2)
# Chunk 2
ggplot(acc, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
install.packages("ggplot2")
# Chunk 1
local({r <- getOption("repos")
r["CRAN"] <- "http://cran.r-project.org"
options(repos=r)
})
acc <<- airquality[complete.cases(airquality),]
summary(acc)
install.packages("ggplot2")
library(ggplot2)
# Chunk 2
ggplot(acc, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
install.packages("ggplot2")
# Chunk 1
local({r <- getOption("repos")
r["CRAN"] <- "http://cran.r-project.org"
options(repos=r)
})
acc <<- airquality[complete.cases(airquality),]
summary(acc)
install.packages("ggplot2")
library(ggplot2)
# Chunk 2
ggplot(acc, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
# Chunk 3
ggplot(acc, aes(Solar.R, Ozone)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
install.packages("ggplot2")
# Chunk 1
local({r <- getOption("repos")
r["CRAN"] <- "http://cran.r-project.org"
options(repos=r)
})
acc <<- airquality[complete.cases(airquality),]
summary(acc)
install.packages("ggplot2")
library(ggplot2)
# Chunk 2
ggplot(acc, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
# Chunk 3
ggplot(acc, aes(Solar.R, Ozone)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
install.packages("ggplot2")
ggplot(acc, aes(Solar.R, Ozone)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
# Chunk 1
local({r <- getOption("repos")
r["CRAN"] <- "http://cran.r-project.org"
options(repos=r)
})
acc <<- airquality[complete.cases(airquality),]
summary(acc)
install.packages("ggplot2")
library(ggplot2)
# Chunk 2
ggplot(acc, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
# Chunk 3
ggplot(acc, aes(Solar.R, Ozone)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
install.packages("ggplot2")
# Chunk 1
local({r <- getOption("repos")
r["CRAN"] <- "http://cran.r-project.org"
options(repos=r)
})
acc <<- airquality[complete.cases(airquality),]
summary(acc)
install.packages("ggplot2")
library(ggplot2)
# Chunk 2
ggplot(acc, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
# Chunk 3
ggplot(acc, aes(Solar.R, Ozone)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
install.packages("ggplot2")
# Chunk 1
local({r <- getOption("repos")
r["CRAN"] <- "http://cran.r-project.org"
options(repos=r)
})
acc <<- airquality[complete.cases(airquality),]
summary(acc)
install.packages("ggplot2")
library(ggplot2)
# Chunk 2
ggplot(acc, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
# Chunk 3
ggplot(acc, aes(Solar.R, Ozone)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
rmarkdown::shiny_prerendered_clean('DDP_Course_Project_Presentation.Rpres')
# Chunk 1
local({r <- getOption("repos")
r["CRAN"] <- "http://cran.r-project.org"
options(repos=r)
})
acc <<- airquality[complete.cases(airquality),]
summary(acc)
install.packages("ggplot2")
library(ggplot2)
# Chunk 2
ggplot(acc, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
# Chunk 3
ggplot(acc, aes(Solar.R, Ozone)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
install.packages("ggplot2")
# Chunk 1
local({r <- getOption("repos")
r["CRAN"] <- "http://cran.r-project.org"
options(repos=r)
})
acc <<- airquality[complete.cases(airquality),]
summary(acc)
install.packages("ggplot2")
library(ggplot2)
# Chunk 2
ggplot(acc, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
# Chunk 3
ggplot(acc, aes(Solar.R, Ozone)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
install.packages("ggplot2")
